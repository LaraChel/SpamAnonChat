import asyncio
import os
import time
import socks
from twocaptcha import TwoCaptcha

from telethon.tl.types import KeyboardButton
from telethon.errors import SessionPasswordNeededError
from telethon.sync import TelegramClient, events, connection
from telethon.tl.functions.channels import JoinChannelRequest
from opentele.api import UseCurrentSession
from telethon.tl.functions.messages import GetBotCallbackAnswerRequest

with open('./templates/captcha_api.txt', 'r', encoding='utf-8') as file:
    capcha_api = str(file.readline().strip())

solver = TwoCaptcha(capcha_api)

with open('./templates/spam_text.txt', 'r', encoding='utf-8') as file:
    spam_text = str(file.readlines()[0])

with open('./templates/proxy.txt', 'r') as file:
    proxy_data = file.readline().strip()

proxy_parts = proxy_data.split('@')
host_port = proxy_parts[0]
username_password = proxy_parts[1].split(':')

proxy = {
    'host': host_port.split(':')[0],
    'port': int(host_port.split(':')[1]),
    'username': username_password[0],
    'password': username_password[1]
}

sessions = os.listdir('./sessions')
total_messages_sent = 0
total_messages_sent_cp = 0


async def start_bot_dialog(session_path, chat_access_state):
    client = TelegramClient(session_path, proxy=(socks.SOCKS5, proxy['host'], proxy['port'], proxy['username'], proxy['password']))
    await client.connect()
    if not await client.is_user_authorized():
        print(f'{session_path} - –Ω–µ–≤–∞–ª–∏–¥')
        return
    else:
        print(f'–≤–∑—è–ª —Å–µ—Å—Å–∏—é –≤ —Ä–∞–±–æ—Ç—É - {session_path}')

    @client.on(events.NewMessage(from_users='@AnonRubot'))
    async def handle_new_message_1(event):
        global total_messages_sent
        if '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω' in event.raw_text:
            await client.send_message('@AnonRubot', spam_text)
            total_messages_sent += 1
            print(f"@AnonRubot - —è –æ—Ç–ø—Ä–∞–≤–∏–ª, –∏—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ {total_messages_sent}")
            await asyncio.sleep(5)
            await client.send_message('@AnonRubot', '/next')
        elif '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Å –≤–∞–º–∏ —Å–≤—è–∑—å üòû' in event.raw_text:
            await client.send_message('@AnonRubot', '/search')
            print('@AnonRubot - —Å–æ –º–Ω–æ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–≤—è–∑—å, –∏—â—É –Ω–µ–∫—Å—Ç')
            await asyncio.sleep(5)
        elif '(–æ—Ç 9 –¥–æ 99)' in event.raw_text:
            await client.send_message('@AnonRubot', '20')
            await client.send_message('@AnonRubot', '/search')
            print('@AnonRubot - —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç 20')
            await asyncio.sleep(5)
        elif '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫' in event.raw_text:
            print('@AnonRubot - —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å, –∏—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ')
            await client.send_message('@AnonRubot', '/next')

        elif '–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏' in event.raw_text or \
            '–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ –≤—ã –Ω–∏ –≤ —á—ë–º –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @AnonBotAdmin' in event.raw_text:
            if event.media and event.media.photo:
                image = await event.download_media(file="./downloaded_image.jpg")

                result = solver.normal('downloaded_image.jpg')
                await client.send_message('@AnonRubot', f'{result["code"]}')
                print(f'—Ä–µ—à–∏–ª –∫–∞–ø—á—É - {result["code"]}, –±–µ—Ä—É —Å–ª–µ–¥. –∞–∫–∫')
                await asyncio.sleep(1)


        elif '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ, –ª–∏–±–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–ø—á—É' in event.raw_text:
            await client.send_message('c', '/restartcaptcha')
            await asyncio.sleep(3)
            print('—Ä–µ—Å—Ç–∞—Ä—Ç–∞–Ω—É–ª –∫–∞–ø—á—É')

        elif '–ü—Ä–∏–Ω–æ—Å–∏–º –Ω–∞—à–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–º –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞.' in event.raw_text or \
                '–£ –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏. –í–∞—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∂–∞–ª–æ–±—ã –∏–∑-–∑–∞ –≤–∞—à–µ–≥–æ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è' in event.raw_text:
            print('@AnonRubot - –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Ç–æ–º, —â–∞—Å –±–ª–æ–∫')
            chat_access_state['anon_flag'] = False
            if not chat_access_state['anon_flag'] and not chat_access_state['anon_cp']:
                await client.disconnect()



    @client.on(events.NewMessage(chats='@anonimnyychatbot'))
    async def new_message_handler(event):
        # print(event.raw_text)
        global total_messages_sent_cp
        if '–®–∞–≥ 1' in event.raw_text:
            sender = await event.get_sender()
            messages = await client.get_messages(sender.username)
            await messages[0].click(0)
            await client.send_message('@anonimnyychatbot', '/start')
        elif '–®–∞–≥ 2' in event.raw_text:
            sender = await event.get_sender()
            messages = await client.get_messages(sender.username)
            print(messages)
            await messages[0].click(0)
            await client.send_message('@anonimnyychatbot', '/start')
        elif '–®–∞–≥ 3' in event.raw_text:
            sender = await event.get_sender()
            messages = await client.get_messages(sender.username)
            print(messages)
            await messages[0].click(0)
            await client.send_message('@anonimnyychatbot', '/start')
        elif '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫–æ–º–Ω–∞—Ç—É:' in event.raw_text:
            sender = await event.get_sender()
            messages = await client.get_messages(sender.username)
            print(messages)
            await messages[0].click(0)
            await client.send_message('@anonimnyychatbot', '/start')
        elif '–ù–∞—à—ë–ª –∫–æ–µ-–∫–æ–≥–æ –¥–ª—è —Ç–µ–±—è!' in event.raw_text:
            await asyncio.sleep(30)
            await client.send_message('@anonimnyychatbot', spam_text)
            total_messages_sent_cp+=1
            print(f"@anonimnyychatbot - —è –æ—Ç–ø—Ä–∞–≤–∏–ª, –∏—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ {total_messages_sent_cp}")
            await asyncio.sleep(5)
            await client.send_message('@anonimnyychatbot', '/next')
        elif '–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' in event.raw_text:
            await client.send_message('@anonimnyychatbot', '/start')
            print('@anonimnyychatbot - —Å–æ –º–Ω–æ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–≤—è–∑—å, –∏—â—É –Ω–µ–∫—Å—Ç')
            await asyncio.sleep(5)
        elif '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞' in event.raw_text:
            await client.send_message('@anonimnyychatbot', '–ú–æ—Å–∫–≤–∞')
            print('@anonimnyychatbot - —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥')
            await asyncio.sleep(5)
            await client.send_message('@anonimnyychatbot', '/start')
            print('@anonimnyychatbot - –∑–∞–ø—É—Å—Ç–∏–ª –ø–æ–∏—Å–∫')
        elif '–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –¥–∏–∞–ª–æ–≥–µ' in event.raw_text:
            await client.send_message('@anonimnyychatbot', '/next')
            print('@anonimnyychatbot - —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ, –∏—â—É –Ω–µ–∫—Å—Ç')
            await asyncio.sleep(5)
        elif '–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!' in event.raw_text:
            print(f'@anonimnyychatbot - –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Ç–æ–º, —à–∞—Å –±–ª–æ–∫')
            chat_access_state['anon_cp'] = False
            if not chat_access_state['anon_flag'] and not chat_access_state['anon_cp']:
                await client.disconnect()
        elif '–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ (—Ç–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)' in event.raw_text:
            if event.media and event.media.photo:
                image = await event.download_media(file="./downloaded_image_cp.jpg")
                result = solver.normal('downloaded_image_cp.jpg')
                await client.send_message('@anonimnyychatbot', f'{result["code"]}')
                print(f'@anonimnyychatbot - —Ä–µ—à–∏–ª –∫–∞–ø—á—É {result["code"]}, –±–µ—Ä—É —Å–ª–µ–¥. –∞–∫–∫')
                await asyncio.sleep(1)
                await client.send_message('@anonimnyychatbot', f'/start')



    async with client:
        try:
            await client.send_message('@anonimnyychatbot', '/start')
            await client.send_message('@AnonRubot', '/start')
            await client.run_until_disconnected()
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –±—Ä–æ: {e}')


    print(f'–°–µ—Å—Å–∏—è {session_path} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')

async def check_flags(chat_access_state, event):
    while True:
        if not chat_access_state['anon_flag'] and not chat_access_state['anon_cp']:
            event.set()
            return
        await asyncio.sleep(1)

async def main():
    for session in sessions:
        session_path = os.path.join('./sessions', session)
        chat_access_state = {'anon_flag': True, 'anon_cp': True}
        event = asyncio.Event()

        asyncio.create_task(check_flags(chat_access_state, event))
        await start_bot_dialog(session_path, chat_access_state)
        # await event.wait()

if __name__ == '__main__':
    asyncio.run(main())